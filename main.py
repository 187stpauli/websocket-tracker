from config.configvalidator import ConfigValidator
from client.client import Client
from utils.logger import logger
from modules.monitor import listen_to_swaps
import asyncio
import json
import sys


async def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Uniswap V3...\n")
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...\n")
        validator = ConfigValidator("config/settings.json")
        settings = await validator.validate_config()

        try:
            with open("constants/networks_data.json", "r", encoding="utf-8") as file:
                networks_data = json.load(file)
        except FileNotFoundError:
            logger.error("‚ùå –§–∞–π–ª networks_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        except json.JSONDecodeError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ —Ñ–∞–π–ª–µ networks_data.json!")
            return

        if settings["network"] not in networks_data:
            logger.error(f"‚ùå –°–µ—Ç—å {settings['network']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ networks_data.json!")
            return

        network = networks_data[settings["network"]]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ RPC URL
        if not network["rpc_url"] or not network["rpc_url"].startswith("ws"):
            logger.error("‚ùå RPC URL –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è WebSocket (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ws:// –∏–ª–∏ wss://)!")
            logger.info("‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å WebSocket URL –≤ —Ñ–∞–π–ª–µ constants/networks_data.json")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3 –∫–ª–∏–µ–Ω—Ç–∞...\n")
        client = Client(
            proxy=settings["proxy"],
            rpc_url=network["rpc_url"],
            chain_id=network["chain_id"],
            token1=network[settings["token1"]],
            token2=network[settings["token2"]],
            explorer_url=network["explorer_url"]
        )

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—É–ª–∞ Uniswap V3...\n")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä—ã {settings['token1']}/{settings['token2']} –≤ —Å–µ—Ç–∏ {settings['network']}\n")
        
        await listen_to_swaps(client)
        logger.info("‚öôÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...\n")
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
