from eth_abi import decode_abi
from web3 import Web3
import logging

logger = logging.getLogger(__name__)

SWAP_TOPIC = "0x783cca1c0412dd0d695e784568d7c5edf5b509b5c8c6c33c1c3fef6aef7e623c"
MINT_TOPIC = "0x9f679b1155ef32ca4e7724a797156521ced63d40c5d9fdcf7c6c2e6dc3e3a002"
BURN_TOPIC = "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67"


def decode_int24(value) -> int:
    if isinstance(value, str) and value.startswith("0x"):
        raw = bytes.fromhex(value[2:])
    elif isinstance(value, bytes):
        raw = value
    else:
        raise ValueError("Unsupported type for int24 decoding")

    if len(raw) >= 3:
        raw = raw[-3:]
    else:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–π—Ç –¥–ª—è int24")

    return int.from_bytes(raw, byteorder='big', signed=True)


def decode_int24_from_abi_slot(slot: bytes) -> int:
    if len(slot) != 32:
        raise ValueError("ABI slot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32 –±–∞–π—Ç–∞")
    return int.from_bytes(slot[29:], byteorder='big', signed=True)


def decode_uniswap_v3_event(raw_log: dict):
    topic0 = raw_log['topics'][0].lower()
    data = raw_log['data']
    address = Web3.to_checksum_address(raw_log['address'])

    if topic0 == BURN_TOPIC:
        logger.info("üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ BURN")

        try:
            topics = raw_log['topics']
            if len(topics) < 3:
                logger.warning("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ topics (%d) ‚Äî –ø—Ä–æ–ø—É—Å–∫", len(topics))
                return None

            owner = Web3.to_checksum_address("0x" + topics[1][-40:])
            tick_lower = decode_int24(topics[2])

            if len(topics) >= 4:
                tick_upper = decode_int24(topics[3])
                event_type = "–ø–æ–ª–Ω—ã–π"
            else:
                tick_upper = None
                event_type = "—É—Å–µ—á—ë–Ω–Ω—ã–π"

            raw_data = bytes.fromhex(data[2:])
            if len(raw_data) != 96:
                logger.warning("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ raw_data (%d –±–∞–π—Ç) –¥–ª—è BURN", len(raw_data))
                return None

            amount, amount0, amount1 = decode_abi(
                ['uint128', 'uint256', 'uint256'],
                raw_data
            )

            logger.info("üßØ [–°–ñ–ò–ì–ê–ù–ò–ï] –ü—É–ª: %s", address)
            logger.info("üë§ –í–ª–∞–¥–µ–ª–µ—Ü: %s", owner)
            logger.info("üß≠ –î–∏–∞–ø–∞–∑–æ–Ω —Ç–∏–∫–æ–≤: %s ‚Üí %s", tick_lower,
                        tick_upper if tick_upper is not None else "(–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)")
            logger.info("üíß –ö–æ–ª-–≤–æ: %s", amount)
            logger.info("üí∞ –¢–æ–∫–µ–Ω0: %s | –¢–æ–∫–µ–Ω1: %s", amount0, amount1)

            return {
                "—Å–æ–±—ã—Ç–∏–µ": "–°–∂–∏–≥–∞–Ω–∏–µ",
                "—Ç–∏–ø_—Å–æ–±—ã—Ç–∏—è": event_type,
                "–≤–ª–∞–¥–µ–ª–µ—Ü": owner,
                "—Ç–∏–∫_–Ω–∏–∂–Ω–∏–π": tick_lower,
                "—Ç–∏–∫_–≤–µ—Ä—Ö–Ω–∏–π": tick_upper,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": amount,
                "—Ç–æ–∫–µ–Ω0": amount0,
                "—Ç–æ–∫–µ–Ω1": amount1
            }

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ BURN: %s", e)
            return None

    elif topic0 == MINT_TOPIC:
        logger.info("ü™ô –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ MINT")
        try:
            topics = raw_log['topics']
            if len(topics) < 4:
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ topics (%d) –¥–ª—è —Å–æ–±—ã—Ç–∏—è MINT", len(topics))
                return None

            sender = Web3.to_checksum_address("0x" + topics[1][-40:])
            owner = Web3.to_checksum_address("0x" + topics[2][-40:])
            tick_lower = decode_int24(topics[3])
            raw_data = bytes.fromhex(data[2:])

            if len(raw_data) != 128:
                logger.warning("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ raw_data (%d –±–∞–π—Ç) –¥–ª—è MINT", len(raw_data))
                return None

            tick_upper = decode_int24_from_abi_slot(raw_data[0:32])
            rest_data = raw_data[32:]
            amount, amount0, amount1 = decode_abi(
                ['uint128', 'uint256', 'uint256'],
                rest_data
            )

            logger.info("ü™ô [–ú–ò–ù–¢] –ü—É–ª: %s", address)
            logger.info("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: %s ‚Üí –í–ª–∞–¥–µ–ª–µ—Ü: %s", sender, owner)
            logger.info("üß≠ –î–∏–∞–ø–∞–∑–æ–Ω —Ç–∏–∫–æ–≤: %s ‚Üí %s", tick_lower, tick_upper)
            logger.info("üíß –ö–æ–ª-–≤–æ: %s", amount)
            logger.info("üí∞ –¢–æ–∫–µ–Ω0: %s | –¢–æ–∫–µ–Ω1: %s", amount0, amount1)

            return {
                "—Å–æ–±—ã—Ç–∏–µ": "–ú–∏–Ω—Ç",
                "—Ç–∏–ø_—Å–æ–±—ã—Ç–∏—è": "–ø–æ–ª–Ω—ã–π",
                "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": sender,
                "–≤–ª–∞–¥–µ–ª–µ—Ü": owner,
                "—Ç–∏–∫_–Ω–∏–∂–Ω–∏–π": tick_lower,
                "—Ç–∏–∫_–≤–µ—Ä—Ö–Ω–∏–π": tick_upper,
                "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": amount,
                "—Ç–æ–∫–µ–Ω0": amount0,
                "—Ç–æ–∫–µ–Ω1": amount1
            }

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MINT: %s", e)
            return None

    elif topic0 == SWAP_TOPIC:
        logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ SWAP")

        try:
            topics = raw_log['topics']
            if len(topics) < 3:
                logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ topics (%d) –¥–ª—è —Å–æ–±—ã—Ç–∏—è SWAP", len(topics))
                return None

            sender = Web3.to_checksum_address("0x" + topics[1][-40:])
            recipient = Web3.to_checksum_address("0x" + topics[2][-40:])
            raw_data = bytes.fromhex(data[2:])

            if len(raw_data) != 160:
                logger.warning("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ raw_data (%d –±–∞–π—Ç) –¥–ª—è SWAP", len(raw_data))
                return None

            tick_raw = raw_data[-32:]
            tick = decode_int24_from_abi_slot(tick_raw)
            rest_data = raw_data[:-32]
            amount0, amount1, sqrtPriceX96, liquidity = decode_abi(
                ['int256', 'int256', 'uint160', 'uint128'],
                rest_data
            )

            logger.info("üîÑ [–û–ë–ú–ï–ù] –ü—É–ª: %s", address)
            logger.info("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: %s ‚Üí –ü–æ–ª—É—á–∞—Ç–µ–ª—å: %s", sender, recipient)
            logger.info("üí± –°—É–º–º–∞: amount0 = %s, amount1 = %s", amount0, amount1)
            logger.info("üìä sqrtPriceX96: %s | –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: %s | —Ç–∏–∫: %s", sqrtPriceX96, liquidity, tick)

            return {
                "—Å–æ–±—ã—Ç–∏–µ": "–û–±–º–µ–Ω",
                "—Ç–∏–ø_—Å–æ–±—ã—Ç–∏—è": "–ø–æ–ª–Ω—ã–π",
                "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": sender,
                "–ø–æ–ª—É—á–∞—Ç–µ–ª—å": recipient,
                "amount0": amount0,
                "amount1": amount1,
                "sqrtPriceX96": sqrtPriceX96,
                "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å": liquidity,
                "—Ç–∏–∫": tick
            }

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SWAP: %s", e)
            return None


    else:
        logger.warning("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å topic0: %s", topic0)

    return None
