import aiohttp
from eth_abi import decode_abi
from modules.get_pool import get_uniswap_v3_pool
import json
from eth_utils import to_checksum_address, decode_hex
import asyncio
from utils.data_saver import DataSaver

with open("abi/pool_abi.json", "r", encoding="utf-8") as f:
    POOL_ABI = json.load(f)


def decode_swap_event(log: dict, swap_topic) -> dict:
    if log["topics"][0].lower() != swap_topic:
        raise ValueError("‚ùå –≠—Ç–æ –Ω–µ Swap —Å–æ–±—ã—Ç–∏–µ")

    sender = to_checksum_address("0x" + log["topics"][1][-40:])
    recipient = to_checksum_address("0x" + log["topics"][2][-40:])
    data = decode_hex(log["data"])

    amount0, amount1, sqrtPriceX96, liquidity, tick_bytes = decode_abi(
        ["int256", "int256", "uint160", "uint128", "bytes32"], data
    )

    # int24 –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±–∞–π—Ç–∞
    tick = int.from_bytes(tick_bytes[-3:], byteorder="big", signed=True)

    return {
        "event": "Swap",
        "sender": sender,
        "recipient": recipient,
        "amount0": amount0,
        "amount1": amount1,
        "sqrtPriceX96": sqrtPriceX96,
        "liquidity": liquidity,
        "tick": tick
    }


def decode_mint_event(log: dict, mint_topic) -> dict:
    if log["topics"][0].lower() != mint_topic:
        raise ValueError("‚ùå –≠—Ç–æ –Ω–µ Mint —Å–æ–±—ã—Ç–∏–µ")

    sender = to_checksum_address("0x" + log["topics"][1][-40:])
    owner = to_checksum_address("0x" + log["topics"][2][-40:])
    data = decode_hex(log["data"])

    tickLower, tickUpper, amount, amount0, amount1 = decode_abi(
        ["int24", "int24", "uint128", "uint256", "uint256"], data
    )

    return {
        "event": "Mint",
        "sender": sender,
        "owner": owner,
        "tickLower": tickLower,
        "tickUpper": tickUpper,
        "amount": amount,
        "amount0": amount0,
        "amount1": amount1
    }


def decode_burn_event(log: dict, burn_topic) -> dict:
    if log["topics"][0].lower() != burn_topic:
        raise ValueError("‚ùå –≠—Ç–æ –Ω–µ Burn —Å–æ–±—ã—Ç–∏–µ")

    owner = to_checksum_address("0x" + log["topics"][1][-40:])
    data = decode_hex(log["data"])

    tickLower, tickUpper, amount, amount0, amount1 = decode_abi(
        ["int24", "int24", "uint128", "uint256", "uint256"], data
    )

    return {
        "event": "Burn",
        "owner": owner,
        "tickLower": tickLower,
        "tickUpper": tickUpper,
        "amount": amount,
        "amount0": amount0,
        "amount1": amount1
    }


async def get_token_info(client, token_address):
    contract = await client.get_contract(token_address, client.w3.eth.contract_factory.contractFactories["ERC20"].abi)
    symbol = await contract.functions.symbol().call()
    decimals = await contract.functions.decimals().call()
    return {
        "address": token_address,
        "symbol": symbol,
        "decimals": decimals
    }


async def listen_to_swaps(client):
    # –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    swap_topic = "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67"
    mint_topic = "0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde"
    burn_topic = "0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c"
    
    pool = await get_uniswap_v3_pool(client)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_saver = DataSaver()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        token0_info = await get_token_info(client, client.token1)
        token1_info = await get_token_info(client, client.token2)
        print(f"üîç –¢–æ–∫–µ–Ω—ã –ø—É–ª–∞: {token0_info['symbol']} / {token1_info['symbol']}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö: {e}")
        token0_info = {"symbol": "Token0", "decimals": 18}
        token1_info = {"symbol": "Token1", "decimals": 18}
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    reconnect_attempts = 0
    max_reconnect_attempts = 5
    
    while reconnect_attempts < max_reconnect_attempts:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.ws_connect(client.rpc_url) as ws:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
                    payload = {
                        "jsonrpc": "2.0",
                        "id": 1,
                        "method": "eth_subscribe",
                        "params": [
                            "logs",
                            {
                                "address": pool,
                                "topics": [[swap_topic, mint_topic, burn_topic]]
                            }
                        ]
                    }
                    await ws.send_str(json.dumps(payload))
                    print("üîå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—É–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞...\n")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
                    reconnect_attempts = 0

                    async for msg in ws:
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            data = json.loads(msg.data)
                            if "params" in data:
                                try:
                                    log = data["params"]["result"]
                                    event_topic = log["topics"][0].lower()
                                    
                                    if event_topic == swap_topic:
                                        decoded = decode_swap_event(log, swap_topic)
                                        
                                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                        amount0_formatted = decoded['amount0'] / (10 ** token0_info['decimals'])
                                        amount1_formatted = decoded['amount1'] / (10 ** token1_info['decimals'])
                                        
                                        print("‚úÖ Swap Event:")
                                        print(f"  Sender: {decoded['sender']}")
                                        print(f"  Recipient: {decoded['recipient']}")
                                        print(f"  {token0_info['symbol']}: {amount0_formatted:.6f}")
                                        print(f"  {token1_info['symbol']}: {amount1_formatted:.6f}")
                                        
                                        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
                                        if decoded['amount0'] != 0 and decoded['amount1'] != 0:
                                            price = abs(amount1_formatted / amount0_formatted)
                                            print(f"  Price: 1 {token0_info['symbol']} = {price:.6f} {token1_info['symbol']}")
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                        data_saver.save_swap_data(decoded)
                                        
                                    elif event_topic == mint_topic:
                                        decoded = decode_mint_event(log, mint_topic)
                                        
                                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                        amount0_formatted = decoded['amount0'] / (10 ** token0_info['decimals'])
                                        amount1_formatted = decoded['amount1'] / (10 ** token1_info['decimals'])
                                        
                                        print("üü¢ Mint Event:")
                                        print(f"  Sender: {decoded['sender']}")
                                        print(f"  Owner: {decoded['owner']}")
                                        print(f"  {token0_info['symbol']}: {amount0_formatted:.6f}")
                                        print(f"  {token1_info['symbol']}: {amount1_formatted:.6f}")
                                        print(f"  Tick Range: {decoded['tickLower']} to {decoded['tickUpper']}")
                                        
                                    elif event_topic == burn_topic:
                                        decoded = decode_burn_event(log, burn_topic)
                                        
                                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                                        amount0_formatted = decoded['amount0'] / (10 ** token0_info['decimals'])
                                        amount1_formatted = decoded['amount1'] / (10 ** token1_info['decimals'])
                                        
                                        print("üî¥ Burn Event:")
                                        print(f"  Owner: {decoded['owner']}")
                                        print(f"  {token0_info['symbol']}: {amount0_formatted:.6f}")
                                        print(f"  {token1_info['symbol']}: {amount1_formatted:.6f}")
                                        print(f"  Tick Range: {decoded['tickLower']} to {decoded['tickUpper']}")
                                    
                                    print()
                                except Exception as e:
                                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                        elif msg.type == aiohttp.WSMsgType.ERROR:
                            print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {msg.data}")
                            break
                        elif msg.type == aiohttp.WSMsgType.CLOSED:
                            print("‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                            break
                            
        except aiohttp.ClientConnectionError as e:
            reconnect_attempts += 1
            wait_time = 2 ** reconnect_attempts  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {reconnect_attempts}/{max_reconnect_attempts} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫")
            await asyncio.sleep(wait_time)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break
    
    if reconnect_attempts >= max_reconnect_attempts:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
